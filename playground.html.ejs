<!doctype html>
<%_ /*
    region header
    Copyright Torben Sickert (info["~at~"]torben.website) 16.12.2012

    License
    -------

    This library written by Torben Sickert stand under a creative commons
    naming 3.0 unported license.
    See https://creativecommons.org/licenses/by/3.0/deed.de
    endregion
*/ _%>
<html>
    <!--region head-->
    <head>
        <meta charset="utf-8">
        <!--Prevent browser caching-->
        <meta http-equiv="cache-control" content="no-cache">
        <meta http-equiv="expires" content="0">
        <meta http-equiv="pragma" content="no-cache">
        <title>playground</title>
        <!--region style-->
        <link rel="stylesheet" href="/@material/slider/dist/mdc.slider.css">
        <style>
            <%-
                require('material-icons/iconfont/material-icons.css')
                    .replace(
                        /(url\()"?(?:\.\/)?(material-icons\.[^.")]+)"?(\))/g,
                        '$1material-icons/iconfont/$2$3'
                    )
             %>
        </style>
        <!--endregion-->
        <!--region polyfill-->
        <%-
            include(
                'web-component-wrapper/polyfill.html',
                {additionalFeatures: [
                    /*
                        Most polyfills are determined via
                        "create-polyfill-service-url" subracted by already
                        includes one due to "web-component-wrapper".
                    */
                    // Asynchronous suggestion creator.
                    'AbortController',
                    'Array.prototype.every',
                    'Array.prototype.fill',
                    'Array.prototype.find',
                    'Array.prototype.forEach',
                    'Array.prototype.indexOf',
                    'Array.prototype.reduce',
                    'Array.prototype.some',
                    'Array.prototype.sort',
                    'Blob',
                    'Event',
                    'fetch',
                    'globalThis',
                    'Intl',
                    'Object.assign',
                    'Object.create',
                    'Object.getOwnPropertyNames',
                    'Object.getPrototypeOf',
                    'Object.setPrototypeOf',
                    'Reflect',
                    'Reflect.construct',
                    'Symbol.prototype.description'
                ]}
            )
        %>
        <!--endregion-->
        <!--region script-->
        <script src="https://www.google.com/recaptcha/api.js?render=6LdvN-sZAAAAAHv2Ko2_g_8EHrIRbNffZoGHseSS"></script>
        <script>
            window.onload = function() {
                /* region fetch mock */
                window.fetch = function(url, options) {
                    const headers = {}
                    if (window.Headers) {
                        const givenHeaders =
                            Array.from(options.headers.entries())
                        for (
                            var index = 0; index < givenHeaders.length; index++
                        )
                            headers[givenHeaders[index][0]] =
                                givenHeaders[index][1]
                        options.headers = headers
                    }

                    console.info(
                        'Send mock request to ' + url + ' with:', options
                    )

                    return new Promise(function(resolve) {
                        resolve({
                            ok: document.querySelector(
                                '[name="reCaptchaV3Challenge"]'
                            ).value,
                            status: document.querySelector(
                                '[name="reCaptchaV3Challenge"]'
                            ).value ? 200 : 420,
                            text: function() {
                                return ')]}\',{}'
                            }
                        })
                    })
                }
                /* endregion */

                Object.values(agileForm.webInputMaterial.components).map(
                    function(component) {
                        component.register()
                    }
                )

                agileForm.index.api.register()
            }
        </script>
        <!--endregion-->
    </head>
    <!--endregion-->
    <body>
        <agile-form
            base-configuration="{
                debug: true,
                evaluations: [['testEvaluation', function() { return 'testEvaluation'}]],
                expressions: [['testExpression', '5']],
                inputs: {
                    simple: {
                        properties: {
                            placeholder: 'Simple placeholder',
                            required: true
                        }
                    },
                    type: {
                        properties: {
                            default: 'A',
                            required: true,
                            selection: ['A', 'C', 'D']
                        }
                    }
                },
                reCaptcha: {
                    key: {
                        v2: '6LcUiyUTAAAAAPHLNbtoP6v-FHsPSyZ4ZqLnbThf',
                        v3: '6LdvN-sZAAAAAHv2Ko2_g_8EHrIRbNffZoGHseSS'
                    }
                },
                target: {url: 'http://localhost:8080'},
                urlConfigurationMask: {include: true}
            }"
            configuration="{
                inputs: {
                    anotherName: {},
                    feelsGood: {
                        properties: {
                            model: {
                                nullable: false,
                                type: 'boolean'
                            }
                        }
                    },
                    items: {properties: {type: 'string[]'}},
                    name: {
                        properties: {
                            model: {
                                default: 'Default Name',
                                maximumLength: 15,
                                minimumLength: 2,
                                nullable: false,
                                regularExpressionPattern: '[a-zA-Z]+'
                            }
                        }
                    },
                    message: {
                        properties: {
                            model: {
                                maximumLength: 50,
                                minimumLength: 4,
                                nullable: false,
                                regularExpressionPattern: '[a-zA-Z0-9]+'
                            }
                        }
                    },
                    pensum: {
                        properties: {
                            model: {
                                default: 10,
                                maximum: 100,
                                minimum: 5,
                                nullable: false
                            }
                        }
                    }
                }
            }"
            dynamic-configuration="{
                inputs: {
                    file: {},
                    legalNotesChecked: {
                        dependsOn: 'reCaptchaV3Challenge',
                        dynamicExtendExpressions: {
                            'model.nullable': 'reCaptchaV3Challenge.value',
                            value: '(eventName === \'change\' && event.target && event.target.name === \'reCaptchaV3Challenge\' && reCaptchaV3Challenge.value) ? false : self.value'
                        }
                    },
                    reCaptchaV3Challenge: {
                        dependsOn: 'legalNotesChecked',
                        dynamicExtendExpressions: {
                            required: function(event, scope) { return !scope.legalNotesChecked.value },
                            value: '(eventName === \'change\' && event.target && event.target.name === \'legalNotesChecked\' && legalNotesChecked.value) ? false : self.value'
                        }
                    }
                }
            }"
        >

            <circular-spinner size="'xlarge'"></circular-spinner>

            <div class="agile-form__status-message"></div>

            <hr
                class="agile-form__group"
                name="message-divider"
                show-if="stateMessage"
            />

            <div
                class="agile-form__group"
                name="send-report"
                show-if="submitted"
            >
                Form-Result: <pre>${Tools.represent(getData())}</pre>
            </div>
            <div
                class="agile-form__group"
                name="response-report"
                show-if="latestResponse"
            >
                Response (Status: ${latestResponse.status}):
                <pre>${Tools.represent(latestResponse.data)}</pre>
            </div>

            <hr
                class="agile-form__group"
                name="result-message-divider"
                show-if="submitted"
            />

            <input name="simple" />

            <generic-input
                declaration="Please fill in your type."
                description="Type"
                labels="{A: 'Label A', B: 'Label B', C: 'Label C'}"
                selection="['A', 'B', 'C', 'D', 'E']"
                name="type"
            ></generic-input>

            <generic-input
                declaration="Additional type."
                description="Second type"
                name="type"
            ></generic-input>

            <generic-input
                declaration="Please fill in your name."
                description="Name"
                name="name"
            ></generic-input>
            <generic-input
                declaration="This is your provided name."
                description="Synchronized name"
                name="name.value"
            ></generic-input>

            <generic-input
                bind-on-blur="this.title = 'Current input: ' + this.value"
                declaration="Please provide a message."
                description="Message"
                editor="text"
                name="message"
                placeholder="Please type in a message..."
            ></generic-input>

            <generic-input
                description="How do you feel?"
                declaration="Do you feel good?"
                labels="{true: 'Yess!', false: 'Oh noo I am sad...'}"
                name="feelsGood"
                placeholder="Please select your feeling"
                search-selection
            ></generic-input>

            <generic-inputs
                default="['coding is much fun']"
                description="Provide some thoughts..."
                name="items"
            ></generic-inputs>

            <file-input description="Nice file" name="file">
            </file-input>

            <slider-input max="100" min="10" name="pensum" step="2">
            </slider-input>

            <div
                class="agile-form__group"
                data-name="slider"
                data-show-if="pensum.value > 30"
            >
                Slider is more than 30 (${pensum.value})
            </div>

            <requireable-checkbox
                description="Check it!" name="legalNotesChecked"
            ></requireable-checkbox>
            <requireable-checkbox
                name="reCaptchaV3Challenge"
                description="Re-CAPTCHA v3 challenge works."
            ></requireable-checkbox>
            <requireable-checkbox
                description="Useless Check" name="uselessCheck"
            ></requireable-checkbox>

            <div class="agile-form__re-captcha-fallback"></div>

            <button truncate>Truncate</button>
            <button clear>Clear</button>
            <button type="reset">Reset</button>
            <button type="submit">OK</button>

            <hr/>

            <div class="agile-form__group" data-name="url">
                TestEvaluationValue: "${true && testEvaluation}"
                <br />
                TestExpressionValue: "${testExpression}"
                <br />
                State-URL:
                <a href="${determineStateURL().encoded}">
                    ${determineStateURL().plain}
                </a>
            </div>

        </agile-form>
    </body>
<html>
<%_ /*
    region vim modline
    vim: set tabstop=4 shiftwidth=4 expandtab:
    vim: foldmethod=marker foldmarker=region,endregion:
    endregion
*/ _%>
